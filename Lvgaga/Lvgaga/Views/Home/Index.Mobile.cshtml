@using LvService.Utilities
@model LvModel.View.Tumblr.TumblrsModel
@{
    ViewBag.Title = "首页";
}

<div>
    <div id="div_tumblrs">
        @foreach (var tumblr in Model.Tumblrs)
        {
            <div class="container-tumblr">
                <img class="img-tumblr lazy" data-original="@tumblr.MediaUri" alt="" />
                <div class="content">
                    <p class="text-tumblr">@tumblr.Text</p>
                    <p class="date-tumblr">@tumblr.CreateTime</p>
                    <button class="btn btn-default btn-favorite" rk="@tumblr.RowKey" tp="@tumblr.MediaType"><span class="glyphicon glyphicon-heart" aria-hidden="true"></span></button>
                    <button class="btn btn-default"><span class="glyphicon glyphicon-share-alt" aria-hidden="true"></span></button>
                    <a class="btn btn-default pull-right btn-comment" href="@tumblr.Uri"><span class="glyphicon glyphicon-th-list" aria-hidden="true"></span></a>
                </div>
                <hr class="hr-tumblr" />
            </div>
        }
    </div>
    <div class="container-block">
        <button id="btn_load" type="button" class="btn btn-default btn-block">加载更多</button>
    </div>
</div>

@section scripts{
    @Scripts.Render("~/bundles/home")
    <script>
        (function() {
            'use strict';

            var continuationToken = @Html.Raw(Model.ContinuationToken.ToJsonString());
            var sas = "@Html.Raw(Model.Sas)";
            var template = $(".container-tumblr:first").clone();

            function initImgs(imgs) {
                imgs.lazyload({
                    effect: "fadeIn"
                });
            }

            function initFavs(btns) {
                btns.on("touchend", function(event) {
                    var btnCur = $(event.currentTarget);
                    if (!btnCur.hasClass("btn-selected")) {
                        favorite(btnCur.attr("tp"), btnCur.attr("rk"), btnCur);
                    } else {
                        unFavorite(btnCur.attr("tp"), btnCur.attr("rk"), btnCur);
                    }
                });
            }

            function setFavs(mediaType, from, to, btns) {
                getFavoriteIndex(mediaType, from, to, function(data) {
                    btns.each(function() {
                        var btnCur = $(this);
                        var rk = btnCur.attr("rk");
                        if (data[rk]) {
                            btnCur.addClass("btn-selected");
                        }
                    });
                });
            }

            function setLoadButton(btn) {
                if (!continuationToken.NextPartitionKey || !continuationToken.NextRowKey) {
                    btn.hide();
                }
            }

            $(function() {
                var divTumblrs = $("#div_tumblrs");
                var btnFavorites = $(".btn-favorite");
                var btnLoad = $("#btn_load");
                initImgs($("img.lazy"));
                initFavs(btnFavorites);
                setFavs("@ViewBag.MediaType", "@Model.Tumblrs.First().RowKey", "@Model.Tumblrs.Last().RowKey", btnFavorites);
                setLoadButton(btnLoad);

                btnLoad.on("touchend", function(event) {
                    if (!continuationToken.NextPartitionKey || !continuationToken.NextRowKey) {
                        return;
                    }

                    var last = $(".container-tumblr:last");
                    queryAzureTableWithLoadingButton(sas, { continuationToken: continuationToken, top: 20, btn: btnLoad })
                        .done(function(data, textStatus, jqXHR) {
                            $.each(data.value, function(index, tumblr) {
                                var rk = getInvertedTicks(tumblr.RowKey);
                                var cp = template.clone();
                                cp.find("img.img-tumblr").attr("data-original", tumblr.MediaUri);
                                cp.find("p.text-tumblr").text(tumblr.Text);
                                cp.find("p.date-tumblr").text(tumblr.CreateTime);
                                cp.find("button.btn-favorite").attr("rk", rk).attr("tp", tumblr.MediaType);
                                cp.find("a.btn-comment").prop("href", combinePath(["/comments", tumblr.MediaType, rk]));
                                cp.appendTo(divTumblrs);
                            });

                            var all = last.nextAll();
                            initImgs(all.find("img.lazy"));
                            initFavs(all.find("button.btn-favorite"));

                            continuationToken.NextPartitionKey = jqXHR.getResponseHeader("x-ms-continuation-NextPartitionKey");
                            continuationToken.NextRowKey = jqXHR.getResponseHeader("x-ms-continuation-NextRowKey");
                        })
                        .done(function(data, textStatus, jqXHR) {
                            var from = getInvertedTicks(data.value[0].RowKey);
                            var to = getInvertedTicks(data.value[data.value.length - 1].RowKey);
                            setFavs("@ViewBag.MediaType", from, to, last.nextAll().find("button.btn-favorite"));
                    });
                });
            });
        })();
    </script>
}
